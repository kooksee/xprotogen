// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/proto/hello/transport.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Header               map[string]string `protobuf:"bytes,1,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b97a238a7cdeeefa, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "hello.Message")
	proto.RegisterMapType((map[string]string)(nil), "hello.Message.HeaderEntry")
}

func init() {
	proto.RegisterFile("examples/proto/hello/transport.proto", fileDescriptor_b97a238a7cdeeefa)
}

var fileDescriptor_b97a238a7cdeeefa = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x9d, 0xd6, 0x56, 0x76, 0x56, 0x44, 0x06, 0x0f, 0xcb, 0x9e, 0x96, 0xe2, 0x21, 0xa7,
	0xa4, 0x4d, 0x2f, 0xea, 0x5d, 0xf0, 0xe2, 0x25, 0xf6, 0x05, 0x52, 0x3a, 0x58, 0x30, 0x6d, 0x96,
	0x24, 0x8a, 0xfb, 0x0e, 0x3e, 0x9f, 0xcf, 0x23, 0xc6, 0x8a, 0xad, 0x97, 0xed, 0x6d, 0xbe, 0x3f,
	0x3f, 0xf8, 0x18, 0xbc, 0xe6, 0x77, 0xbb, 0x69, 0x1d, 0x47, 0xd5, 0x06, 0x9f, 0xbc, 0x5a, 0xb3,
	0x73, 0x5e, 0xa5, 0x60, 0xb7, 0xb1, 0xf5, 0x21, 0xc9, 0xec, 0xd2, 0x28, 0xdb, 0x93, 0x0f, 0xc0,
	0xb3, 0x47, 0x8e, 0xd1, 0x3e, 0x33, 0x69, 0x1c, 0xaf, 0xd9, 0xae, 0x38, 0x54, 0xd0, 0x0c, 0x45,
	0xa9, 0x6b, 0x99, 0x3b, 0x72, 0x97, 0xcb, 0x87, 0x1c, 0xde, 0x6f, 0x53, 0xe8, 0xcc, 0xae, 0x49,
	0x84, 0xa7, 0x4b, 0xbf, 0xea, 0xaa, 0x41, 0x03, 0xe2, 0xdc, 0xe4, 0xbb, 0xbe, 0xc5, 0x72, 0xaf,
	0x4a, 0x97, 0x38, 0x7c, 0xe1, 0xae, 0x82, 0x06, 0x44, 0x61, 0xbe, 0x4f, 0xba, 0xc2, 0xd1, 0x9b,
	0x75, 0xaf, 0x9c, 0xa9, 0xc2, 0xfc, 0x88, 0xbb, 0xc1, 0x0d, 0xe8, 0x4f, 0xc0, 0x62, 0xf1, 0xbb,
	0x94, 0x34, 0xe2, 0x82, 0x63, 0x7a, 0x4a, 0x81, 0xed, 0x86, 0x2e, 0x0e, 0xe7, 0xd4, 0xff, 0xf4,
	0xe4, 0x44, 0xc0, 0x14, 0x68, 0x86, 0xe5, 0x1f, 0x33, 0x3b, 0x06, 0x3a, 0x44, 0x74, 0x3f, 0x32,
	0x05, 0x52, 0xfb, 0xc8, 0xbc, 0x1f, 0x59, 0x8e, 0xf3, 0xd7, 0xe7, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0xde, 0xc9, 0xc5, 0x9d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransportClient interface {
	TestStream(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStreamClient, error)
	TestStream1(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStream1Client, error)
	TestStream2(ctx context.Context, in *Message, opts ...grpc.CallOption) (Transport_TestStream2Client, error)
	TestStream3(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type transportClient struct {
	cc *grpc.ClientConn
}

func NewTransportClient(cc *grpc.ClientConn) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) TestStream(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[0], "/hello.Transport/TestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportTestStreamClient{stream}
	return x, nil
}

type Transport_TestStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type transportTestStreamClient struct {
	grpc.ClientStream
}

func (x *transportTestStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportTestStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) TestStream1(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[1], "/hello.Transport/TestStream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportTestStream1Client{stream}
	return x, nil
}

type Transport_TestStream1Client interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type transportTestStream1Client struct {
	grpc.ClientStream
}

func (x *transportTestStream1Client) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportTestStream1Client) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) TestStream2(ctx context.Context, in *Message, opts ...grpc.CallOption) (Transport_TestStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[2], "/hello.Transport/TestStream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportTestStream2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transport_TestStream2Client interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type transportTestStream2Client struct {
	grpc.ClientStream
}

func (x *transportTestStream2Client) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) TestStream3(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/hello.Transport/TestStream3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
type TransportServer interface {
	TestStream(Transport_TestStreamServer) error
	TestStream1(Transport_TestStream1Server) error
	TestStream2(*Message, Transport_TestStream2Server) error
	TestStream3(context.Context, *Message) (*Message, error)
}

// UnimplementedTransportServer can be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (*UnimplementedTransportServer) TestStream(srv Transport_TestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (*UnimplementedTransportServer) TestStream1(srv Transport_TestStream1Server) error {
	return status.Errorf(codes.Unimplemented, "method TestStream1 not implemented")
}
func (*UnimplementedTransportServer) TestStream2(req *Message, srv Transport_TestStream2Server) error {
	return status.Errorf(codes.Unimplemented, "method TestStream2 not implemented")
}
func (*UnimplementedTransportServer) TestStream3(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestStream3 not implemented")
}

func RegisterTransportServer(s *grpc.Server, srv TransportServer) {
	s.RegisterService(&_Transport_serviceDesc, srv)
}

func _Transport_TestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).TestStream(&transportTestStreamServer{stream})
}

type Transport_TestStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type transportTestStreamServer struct {
	grpc.ServerStream
}

func (x *transportTestStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportTestStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_TestStream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).TestStream1(&transportTestStream1Server{stream})
}

type Transport_TestStream1Server interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type transportTestStream1Server struct {
	grpc.ServerStream
}

func (x *transportTestStream1Server) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportTestStream1Server) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_TestStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransportServer).TestStream2(m, &transportTestStream2Server{stream})
}

type Transport_TestStream2Server interface {
	Send(*Message) error
	grpc.ServerStream
}

type transportTestStream2Server struct {
	grpc.ServerStream
}

func (x *transportTestStream2Server) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Transport_TestStream3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).TestStream3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Transport/TestStream3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).TestStream3(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestStream3",
			Handler:    _Transport_TestStream3_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStream",
			Handler:       _Transport_TestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestStream1",
			Handler:       _Transport_TestStream1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestStream2",
			Handler:       _Transport_TestStream2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "examples/proto/hello/transport.proto",
}
