package main

import (
	"log"

	"github.com/pubgo/xerror"
	"github.com/pubgo/xprotogen/gen"
)

func main() {
	defer xerror.RespDebug()

	m := gen.New("golug")
	m.Parameter(func(key, value string) {
		log.Println("params:", key, "=", value)
	})

	xerror.Panic(m.GenWithTpl(
		func(fd *gen.FileDescriptor) string {
			return `
// Code generated by protoc-gen-golug. DO NOT EDIT.
{%- if !fd.GetOptions().GetDeprecated() %}
// source: {{fd.GetName()}}
{%- else %}
// {{fd.GetName()}} is a deprecated file.
{%- endif %}

package {{pkg}}
import (
	"reflect"

	"google.golang.org/grpc"
	"github.com/pubgo/golug/xgen"
	"github.com/pubgo/golug/client/grpclient"
)
`
		},

		func(fd *gen.FileDescriptor) string {
			return `
{% for ss in fd.GetService() %}
	func Get{{ss.Srv}}Client(srv string, opts ...grpc.DialOption) func() ({{ss.Srv}}Client,error) {
		client := grpclient.Client(srv, opts...)
		return func() ({{ss.Srv}}Client,error) {
			c, err := client.Get()
			return &{{unExport(ss.Srv)}}Client{c},err
		}
	}
{% endfor %}
`
		},


		func(fd *gen.FileDescriptor) string {
			var tpl = ""
			tpl += `func init() {`
			for _, ss := range fd.GetService() {
				var isStream bool
				for _, m := range ss.GetMethod() {
					if m.CS || m.SS {
						isStream = true
						break
					}
				}

				tpl += `
				var mthList []xgen.GrpcRestHandler
				{%- for m in ss.GetMethod() %}
					mthList = append(mthList, xgen.GrpcRestHandler{
						Service:      "{{pkg}}.{{ss.Name}}",
						Name:         "{{m.GetName()}}",
						Method:       "{{m.HttpMethod}}",
						Path:          "{{m.HttpPath}}",
						ClientStream:  "{{m.CS}}"=="True",
						ServerStreams: "{{m.SS}}"=="True",
					})
				{% endfor %}
				xgen.Add(reflect.ValueOf(Register{{ss.Srv}}Server),mthList)`
				if !isStream {
					tpl += `xgen.Add(reflect.ValueOf(Register{{ss.Srv}}HandlerFromEndpoint), nil)`
				}
			}

			tpl += `}`

			return tpl
		},
	))
}
