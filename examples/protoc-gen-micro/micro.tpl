{% package main %}

{% import gen "github.com/pubgo/xprotogen/gen" %}

{% func Header(pkg string, fd *gen.FileDescriptor) %}
    // Code generated by protoc-gen-micro. DO NOT EDIT.
    {%- if fd.GetOptions().GetDeprecated() -%}
        // {%s fd.GetName() %} is a deprecated file.
    {%- else -%}
        // source: {%s fd.GetName() %}
    {%- endif -%}

    package {%s pkg %}

    import (
    	fmt "fmt"
    	math "math"
    	context "context"

        client "github.com/asim/go-micro/v3/client"
    	server "github.com/asim/go-micro/v3/server"
    	_ "github.com/gogo/protobuf/gogoproto"
    	proto "github.com/golang/protobuf/proto"
    	_ "google.golang.org/genproto/googleapis/api/annotations"
    )

    // Reference imports to suppress errors if they are not otherwise used.
    var _ = proto.Marshal
    var _ = fmt.Errorf
    var _ = math.Inf

    // This is a compile-time assertion to ensure that this generated file
    // is compatible with the proto package it is being compiled against.
    // A compilation error at this line likely means your copy of the
    // proto package needs to be updated.
    const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

    // Reference imports to suppress errors if they are not otherwise used.
    var _ context.Context
    var _ client.Option
    var _ server.Option
{% endfunc %}


{% func Service(ss *gen.Service) %}
    {% code
        service:=ss.GetName()
        service1:=gen.UnExport(ss.GetName())
    %}

    // Client API for @service service
    type {%s service %}Service interface {
        {%- for _, m := range ss.GetMethod() -%}
            {%s m.GetName() %}(ctx context.Context, in *{%s m.GetInputType() %}, opts ...client.CallOption) (* {%s m.GetOutputType() %}, error)
        {%- endfor -%}
    }

    type {%s service1 %}Service struct {
        c    client.Client
        name string
    }

    func New{%s service %}Service(name string, c client.Client) {%s service %}Service {
        return &{%s service1 %}Service{
            c:    c,
            name: name,
        }
    }

    {% for _, m := range ss.GetMethod() %}
        func (c * {%s service1 %}Service) {%s m.GetName() %}(ctx context.Context, in *{%s m.GetInputType() %}, opts ...client.CallOption) (* {%s m.GetOutputType() %}, error) {
            req := c.c.NewRequest(c.name, "{%s service %}.{%s m.GetName() %}", in)
            out := new({%s m.GetOutputType() %})
            err := c.c.Call(ctx, req, out, opts...)
            if err != nil {
                return nil, err
            }
            return out, nil
        }
    {% endfor %}

    // Server API for {%s service %} service
    type {%s service %}Handler interface {
        {%- for _, m := range ss.GetMethod() -%}
            {%s m.GetName() %}(context.Context, *{%s m.GetInputType() %}, *{%s m.GetOutputType() %}) error
        {%- endfor -%}
    }

    func Register{%s service %}Handler(s server.Server, hdlr {%s service %}Handler, opts ...server.HandlerOption) error {
        type {%s service1 %} interface {
            {%- for _, m := range ss.GetMethod() -%}
                {%s m.GetName() %}(ctx context.Context,in *{%s m.GetInputType() %},out *{%s m.GetOutputType() %}) error
            {%- endfor -%}
        }
        type {%s service %} struct {
            {%s service1 %}
        }
        h := &{%s service1 %}Handler{hdlr}
        return s.Handle(s.NewHandler(&{%s service %}{h}, opts...))
    }

    type {%s service1 %}Handler struct {
        {%s service %}Handler
    }

    {% for _, m := range ss.GetMethod() %}
        func (h *{%s service1 %}Handler) {%s m.GetName() %}(ctx context.Context, in *{%s m.GetInputType() %}, out *{%s m.GetOutputType() %}) error {
            return h.{%s service %}Handler.Version(ctx, in, out)
        }
    {% endfor %}


    {% for _, m := range ss.GetMethod() %}
        {% code
            method , path := m.GetHttpMethod()
        %}
        // {%s method %}
        // {%s path %}
    {% endfor %}
{% endfunc %}